import cv2
import dlib
from scipy.spatial import distance as dist
from imutils import face_utils
import time
import tkinter as tk
from tkinter import messagebox

def eye_aspect_ratio(eye):
    # 눈의 세로 방향 비율 계산
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear

def midpoint(ptA, ptB):
    # 두 점의 중점 계산
    return ((ptA[0] + ptB[0]) * 0.5, (ptA[1] + ptB[1]) * 0.5)

# 눈의 비율과 허용되는 최대 프레임 내 눈 깜빡임 횟수 설정
EYE_AR_THRESH = 0.3
EYE_AR_CONSEC_FRAMES = 48

# 얼굴 검출기 및 얼굴 랜드마크 검출기 초기화
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

# 눈 인덱스 추출
(left_eye_start, left_eye_end) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
(right_eye_start, right_eye_end) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

# 웹캠 초기화
cap = cv2.VideoCapture(0)

# 웹캠이 제대로 열렸는지 확인
if not cap.isOpened():
    print("웹캠을 열 수 없습니다. 프로그램을 종료합니다.")
    exit()

# 눈 깜빡임 횟수 및 기타 변수 초기화
blink_counter = 0
TOTAL = 0
is_sleeping = False
start_sleep_time = None
start_time = time.time()

# 알림창을 띄우기 위한 Tkinter 초기화
root = tk.Tk()
root.withdraw()  # 창을 숨기기

# 코드 실행 루프
while True:
    ret, frame = cap.read()

    # 유효한 프레임이 아니면 루프의 다음 반복으로 넘어감
    if not ret:
        continue

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # 얼굴 검출
    faces = detector(gray, 0)

    # concentration_status 초기화
    concentration_status = "Not Concentrating"

    for face in faces:
        shape = predictor(gray, face)
        shape = face_utils.shape_to_np(shape)

        # 왼쪽 눈과 오른쪽 눈 좌표 추출 및 눈 비율 계산
        leftEye = shape[left_eye_start:left_eye_end]
        rightEye = shape[right_eye_start:right_eye_end]
        leftEAR = eye_aspect_ratio(leftEye)
        rightEAR = eye_aspect_ratio(rightEye)
        ear = (leftEAR + rightEAR) / 2.0

        # 눈 깜빡임 감지
        if ear < EYE_AR_THRESH:
            blink_counter += 1
        else:
            if blink_counter >= EYE_AR_CONSEC_FRAMES:
                TOTAL += 1
            blink_counter = 0

        # 눈을 감고 있는지 확인
        if blink_counter >= EYE_AR_CONSEC_FRAMES:
            messagebox.showinfo("알림", "눈을 뜨세요!")
            blink_counter = 0

    # 1분 간격으로 통계 출력 및 화면에 결과 표시
    elapsed_time = time.time() - start_time
    if elapsed_time > 60:
        print(f"Total Blinking Time: {TOTAL} seconds")
        print(f"Concentration Status: {concentration_status}")
        print("——————————————")
        start_time = time.time()
        TOTAL = 0

    # 화면에 결과 표시
    cv2.putText(frame, f"Concentration: {concentration_status}", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    cv2.imshow("Frame", frame)

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord("q"):
        break

# 정리 작업
cap.release()
cv2.destroyAllWindows()

